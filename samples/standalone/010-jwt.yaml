apiVersion: flomesh.io/v1alpha1
kind: Proxy
metadata:
  name: pipy-standalone-010
spec:
  mode: Standalone
  replicas: 1
  image: flomesh/pipy-pjs:latest
  port: 6000
  config:
    config.js: |
      ((
          _endpoints,
          _keystores,
          _verify,
      ) => (

      _endpoints = [
          'http://127.0.0.1:6081/api/v1/jwks',
          'https://127.0.0.1:6082/api/v1/jwks',
      ],

      _keystores = _endpoints.map(() => null),

      _verify = jwt => (
          ((
              kid,
              key,
          ) => (
              jwt = new crypto.JWT(jwt || ''),
              jwt.isValid ? (
                  key = null,
                  kid = jwt.header?.kid,
                  _keystores.find(keys => key = keys.find(k => k.kid === kid)),
                  key ? (
                      jwt.verify(key.jwk) ? 'OK' : 'Invalid signature'
                  ) : (
                      'Invalid key'
                  )
              ) : (
                  'Invalid token'
              )
          ))()
      ),

      pipy({
          _result: '',
      })

      .listen(6000)
          .fork('verify')
          .wait(() => _result !== '')
          .link('pass', () => _result === 'OK', 'ban')

      .pipeline('pass')
          .connect('127.0.0.1:8080')

      .pipeline('ban')
          .decodeHttpRequest()
          .replaceMessage(() => new Message(_result))
          .encodeHttpResponse({ status: 401 })

      .pipeline('verify')
          .decodeHttpRequest()
          .onMessageStart(e => (
              ((
                  token,
              ) => (
                  token = e.head.headers.authorization || '',
                  token.startsWith('Bearer ') && (token = token.substring(7)),
                  _result = _verify(token)
              ))()
          ))

      .task('30s')
          .onSessionStart(() => console.log('Updating keys...'))
          .fork('get-keys', () => (
              _endpoints.map((url, i) => ({ i, url: new URL(url) }))
          ))
          .wait(() => _keystores.every(v => v))
          .replaceMessage(() => (
              console.log('Updated keys'),
              new SessionEnd
          ))

      .pipeline('get-keys')
          .replaceMessage(() => new Message({
              method: 'GET',
              path: this.url.path,
              headers: {
                  host: this.url.host,
              },
          }))
          .encodeHttpRequest()
          .connect(() => this.url.host)
          .decodeHttpResponse()
          .onMessage(msg => (
              _keystores[this.i] = JSON.decode(msg.body)?.keys || [],
              _keystores[this.i].forEach(k => k.jwk = new crypto.JWK(k))
          ))

      // Mock backend service on port 8080
      .listen(8080)
          .decodeHttpRequest()
          .replaceMessage(new Message('Hello!\n'))
          .encodeHttpResponse()

      // Mock key store service on port 6081
      .listen(6081)
          .decodeHttpRequest()
          .replaceMessage(new Message(os.readFile('./keys-1.json')))
          .encodeHttpResponse()

      // Mock key store service on port 6082
      .listen(6082)
          .decodeHttpRequest()
          .replaceMessage(new Message(os.readFile('./keys-2.json')))
          .encodeHttpResponse()

      ))()
    ecdsa-invalid.jwt: |
      eyJhbGciOiJFUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6ImVjZHNhIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.AbZciFxpI9LvJpNu1eg6VCqakYMZjAvOh14Notjh_uouHBSK_dBDTRDe--xStV9LzokASHvZTDHMYEKZdEoGpgMKAZRq0c8S5guM0sFrJHGyuTdsND4scp8rX7i8vPlVxIk51qzqDQJCTeXc-StSfbWeidN7J-We0YaOhYkYgcJVWHJv

    ecdsa.jwt: |
      eyJhbGciOiJFUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6ImVjZHNhIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.AbZciFxpI9LvJpNu1eg6VCqakYMZjAvOh14Notjh_uouHBSK_dBDTRDe--xStV9LzokASHvZTDHMYEKZdEoGpgMKAZRq0c8S5guM0sFrJHGyuTdsND4scp8rX7i8vPlVxIk51qzqDQJCTeXc-StSfbWeidN7J-We8YaOhYkYgcJVWHJv

    ecdsa.pem: |
      -----BEGIN EC PRIVATE KEY-----
      MIHcAgEBBEIBiyAa7aRHFDCh2qga9sTUGINE5jHAFnmM8xWeT/uni5I4tNqhV5Xx
      0pDrmCV9mbroFtfEa0XVfKuMAxxfZ6LM/yKgBwYFK4EEACOhgYkDgYYABAGBzgdn
      P798FsLuWYTDDQA7c0r3BVk8NnRUSexpQUsRilPNv3SchO0lRw9Ru86x1khnVDx+
      duq4BiDFcvlSAcyjLACJvjvoyTLJiA+TQFdmrearjMiZNE25pT2yWP1NUndJxPcv
      VtfBW48kPOmvkY4WlqP5bAwCXwbsKrCgk6xbsp12ew==
      -----END EC PRIVATE KEY-----

    hmac-invalid.jwt: |
      eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImhtYWMifQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.VchsH_Iq-ZTG87YjUWzuorUwKrolj1cscFbubDEtuIo

    hmac.jwt: |
      eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImhtYWMifQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.VchsH_Iq-ZTG87YjUWzuorUwKrolj1cScFbubDEtuIo
    keys-1.json: |
      {
        "keys": [
          {
            "kty": "RSA",
            "kid": "rsa",
            "use": "sig",
            "n": "nzyis1ZjfNB0bBgKFMSvvkTtwlvBsaJq7S5wA-kzeVOVpVWwkWdVha4s38XM_pa_yr47av7-z3VTmvDRyAHcaT92whREFpLv9cj5lTeJSibyr_Mrm_YtjCZVWgaOYIhwrXwKLqPr_11inWsAkfIytvHWTxZYEcXLgAXFuUuaS3uF9gEiNQwzGTU1v0FqkqTBr4B8nW3HCN47XUu0t8Y0e-lf4s4OxQawWD79J9_5d3Ry0vbV3Am1FtGJiJvOwRsIfVChDpYStTcHTCMqtvWbV6L11BWkpzGXSW4Hv43qa-GSYOD2QU68Mb59oSk2OB-BtOLpJofmbGEGgvmwyCI9Mw",
            "e": "AQAB"
          }
        ]
      }

    keys-2.json: |
      {
        "keys": [
          {
            "kty": "EC",
            "kid": "ecdsa",
            "use": "sig",
            "crv": "P-521",
            "x": "AYHOB2c_v3wWwu5ZhMMNADtzSvcFWTw2dFRJ7GlBSxGKU82_dJyE7SVHD1G7zrHWSGdUPH526rgGIMVy-VIBzKMs",
            "y": "AIm-O-jJMsmID5NAV2at5quMyJk0TbmlPbJY_U1Sd0nE9y9W18FbjyQ86a-RjhaWo_lsDAJfBuwqsKCTrFuynXZ7"
          }
        ]
      }

    rsa-invalid.jwt: |
      eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InJzYSJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.CqXT2tzVof8RWcKHs8BQ1wapTt6MjCPxs8aNEeXNX73C4VTBGcj0AfxeaGozCPhyqOyME6juHoNiAwbQ88zXCVBp7zgis2W5KJ7102Znbj17F5lrr78rVC-1bFI4tgNoiBZ6OAaTLjD71_OsvwaArWtqJKnD8sWcfh7Cqbg-6ev41p4Kkm-Q8kWM01iyG9N256r86tQAikpLetQOHMyLeMrQHqTqVcKpAgv40D2h9_s4wopr51uJQYYdC3lx1TVsIzf9jPzIhe8tnkLIl134_Qcgab-cd0IS1WPoobkakUiIwpIWj-vV_S_WjbTEwCGUxQb2mJ_01ZBwFof_8aH-zg
    rsa.jwt: |
      eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InJzYSJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.CqXT2tzVof8RWcKHs8BQ1wapTt6MjCPxs8aNEeXNX73C4VTBGcj0AfxeaGozCPhyqOyME6juHoNiAwbQ88zXCVBp7zgis2W5KJ7102Znbj17F5lrr78rVC-1bFI4tgNoiBZ6OAaTLjD71_OsvwaArWtqJKnD8sWcfh7Cqbg-6ev41p4Kkm-Q8kWM01iyG9N256r86tQAikpLetQOHMyLeMrQHqTqVcKpAgv40D2h9_s4wopr51uJQYYdC3lx1TVsIzf9jPzIhe8tnkLIl134_Qcgab-cd0IS1WPoobkakUiIwpIWj-vV_S_WjbTEwCGUxQb2mJ_01ZBwFof_7aH-zg
    rsa.pem: |
      -----BEGIN RSA PRIVATE KEY-----
      MIIEogIBAAKCAQEAnzyis1ZjfNB0bBgKFMSvvkTtwlvBsaJq7S5wA+kzeVOVpVWw
      kWdVha4s38XM/pa/yr47av7+z3VTmvDRyAHcaT92whREFpLv9cj5lTeJSibyr/Mr
      m/YtjCZVWgaOYIhwrXwKLqPr/11inWsAkfIytvHWTxZYEcXLgAXFuUuaS3uF9gEi
      NQwzGTU1v0FqkqTBr4B8nW3HCN47XUu0t8Y0e+lf4s4OxQawWD79J9/5d3Ry0vbV
      3Am1FtGJiJvOwRsIfVChDpYStTcHTCMqtvWbV6L11BWkpzGXSW4Hv43qa+GSYOD2
      QU68Mb59oSk2OB+BtOLpJofmbGEGgvmwyCI9MwIDAQABAoIBACiARq2wkltjtcjs
      kFvZ7w1JAORHbEufEO1Eu27zOIlqbgyAcAl7q+/1bip4Z/x1IVES84/yTaM8p0go
      amMhvgry/mS8vNi1BN2SAZEnb/7xSxbflb70bX9RHLJqKnp5GZe2jexw+wyXlwaM
      +bclUCrh9e1ltH7IvUrRrQnFJfh+is1fRon9Co9Li0GwoN0x0byrrngU8Ak3Y6D9
      D8GjQA4Elm94ST3izJv8iCOLSDBmzsPsXfcCUZfmTfZ5DbUDMbMxRnSo3nQeoKGC
      0Lj9FkWcfmLcpGlSXTO+Ww1L7EGq+PT3NtRae1FZPwjddQ1/4V905kyQFLamAA5Y
      lSpE2wkCgYEAy1OPLQcZt4NQnQzPz2SBJqQN2P5u3vXl+zNVKP8w4eBv0vWuJJF+
      hkGNnSxXQrTkvDOIUddSKOzHHgSg4nY6K02ecyT0PPm/UZvtRpWrnBjcEVtHEJNp
      bU9pLD5iZ0J9sbzPU/LxPmuAP2Bs8JmTn6aFRspFrP7W0s1Nmk2jsm0CgYEAyH0X
      +jpoqxj4efZfkUrg5GbSEhf+dZglf0tTOA5bVg8IYwtmNk/pniLG/zI7c+GlTc9B
      BwfMr59EzBq/eFMI7+LgXaVUsM/sS4Ry+yeK6SJx/otIMWtDfqxsLD8CPMCRvecC
      2Pip4uSgrl0MOebl9XKp57GoaUWRWRHqwV4Y6h8CgYAZhI4mh4qZtnhKjY4TKDjx
      QYufXSdLAi9v3FxmvchDwOgn4L+PRVdMwDNms2bsL0m5uPn104EzM6w1vzz1zwKz
      5pTpPI0OjgWN13Tq8+PKvm/4Ga2MjgOgPWQkslulO/oMcXbPwWC3hcRdr9tcQtn9
      Imf9n2spL/6EDFId+Hp/7QKBgAqlWdiXsWckdE1Fn91/NGHsc8syKvjjk1onDcw0
      NvVi5vcba9oGdElJX3e9mxqUKMrw7msJJv1MX8LWyMQC5L6YNYHDfbPF1q5L4i8j
      8mRex97UVokJQRRA452V2vCO6S5ETgpnad36de3MUxHgCOX3qL382Qx9/THVmbma
      3YfRAoGAUxL/Eu5yvMK8SAt/dJK6FedngcM3JEFNplmtLYVLWhkIlNRGDwkg3I5K
      y18Ae9n7dHVueyslrb6weq7dTkYDi3iOYRW8HRkIQh06wEdbxt0shTzAJvvCQfrB
      jg/3747WSsf/zBTcHihTRBdAv6OmdhV4/dD5YBfLAkLrd+mX7iE=
      -----END RSA PRIVATE KEY-----
